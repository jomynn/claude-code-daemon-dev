<%
// Set layout variables
const pageTitle = 'Dashboard';
const pageDescription = 'Monitor your Claude Code Daemon performance and system metrics in real-time.';
const includeCharts = true;
%>

<%- include('partials/layout', {
    title,
    env,
    currentPage,
    pageTitle,
    pageDescription,
    includeCharts,
    body: `
    <!-- Stats Grid -->
    <div class="grid grid-4">
        <div class="stat-card">
            <div class="stat-card-icon status-icon-info">
                <i class="ti ti-coins"></i>
            </div>
            <div class="stat-value" id="current-tokens">0</div>
            <div class="stat-label">Current Tokens</div>
            <div class="stat-change positive" id="tokens-change">+0%</div>
        </div>

        <div class="stat-card">
            <div class="stat-card-icon status-icon-success">
                <i class="ti ti-activity"></i>
            </div>
            <div class="stat-value" id="requests-hour">0</div>
            <div class="stat-label">Requests/Hour</div>
            <div class="stat-change positive" id="requests-change">+0%</div>
        </div>

        <div class="stat-card">
            <div class="stat-card-icon status-icon-warning">
                <i class="ti ti-gauge"></i>
            </div>
            <div class="stat-value" id="usage-percent">0%</div>
            <div class="stat-label">Usage Limit</div>
            <div class="progress" style="margin-top: var(--space-sm);">
                <div class="progress-fill" id="usage-progress" style="width: 0%"></div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-card-icon status-icon-purple">
                <i class="ti ti-clock"></i>
            </div>
            <div class="stat-value" id="time-remaining">--</div>
            <div class="stat-label">Time Remaining</div>
            <div style="font-size: var(--font-size-xs); color: var(--text-muted); margin-top: var(--space-xs);">
                At current rate
            </div>
        </div>
    </div>

    <!-- Active Workspace Status -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="ti ti-layout-dashboard icon-hover-scale"></i>
                Active Workspace Status
            </h2>
        </div>
        <div class="grid grid-3">
            <div class="card">
                <div class="card-header">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <h3 class="card-title">
                            <i class="ti ti-target icon-hover-scale" style="background: var(--gradient-success); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text;"></i>
                            Current Project
                        </h3>
                        <span class="badge badge-secondary" id="project-status-badge">No Project</span>
                    </div>
                </div>
                <div class="workspace-details">
                    <div class="detail-item">
                        <span class="detail-label">Project Name:</span>
                        <span class="detail-value" id="active-project-name">None selected</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Project Path:</span>
                        <span class="detail-value" id="active-project-path">--</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Priority:</span>
                        <span class="detail-value" id="active-project-priority">--</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Last Activity:</span>
                        <span class="detail-value" id="active-project-activity">--</span>
                    </div>
                </div>
                <div style="margin-top: var(--space-md);">
                    <button id="open-workspace-btn" class="btn btn-primary btn-sm" disabled>
                        <i class="ti ti-external-link"></i>
                        Open Workspace
                    </button>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <h3 class="card-title">
                            <i class="ti ti-robot"></i>
                            Claude Code Status
                        </h3>
                        <span class="badge badge-error" id="claude-status-indicator">Stopped</span>
                    </div>
                </div>
                <div class="workspace-details">
                    <div class="detail-item">
                        <span class="detail-label">Session Status:</span>
                        <span class="detail-value" id="claude-session-status">Not running</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Uptime:</span>
                        <span class="detail-value" id="claude-session-uptime">00:00:00</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Model:</span>
                        <span class="detail-value" id="claude-current-model">claude-3-5-sonnet</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Messages:</span>
                        <span class="detail-value" id="claude-message-count">0</span>
                    </div>
                </div>
                <div style="margin-top: var(--space-md); display: flex; gap: var(--space-sm);">
                    <button id="start-claude-dashboard-btn" class="btn btn-primary btn-sm">
                        <i class="ti ti-play"></i>
                        Start
                    </button>
                    <button id="stop-claude-dashboard-btn" class="btn btn-secondary btn-sm" disabled>
                        <i class="ti ti-stop"></i>
                        Stop
                    </button>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <h3 class="card-title">
                            <i class="ti ti-bolt"></i>
                            BMAD Workflow
                        </h3>
                        <span class="badge badge-secondary" id="bmad-status-indicator">Inactive</span>
                    </div>
                </div>
                <div class="workspace-details">
                    <div class="detail-item">
                        <span class="detail-label">Workflow Type:</span>
                        <span class="detail-value" id="bmad-workflow-type">None</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Active Agents:</span>
                        <span class="detail-value" id="bmad-active-agents">0</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Current Phase:</span>
                        <span class="detail-value" id="bmad-current-phase">--</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Progress:</span>
                        <span class="detail-value" id="bmad-progress">0%</span>
                    </div>
                </div>
                <div style="margin-top: var(--space-md);">
                    <button id="start-bmad-dashboard-btn" class="btn btn-primary btn-sm" disabled>
                        <i class="ti ti-play"></i>
                        Start BMAD
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Slack Integration -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="ti ti-brand-slack"></i>
                Slack Integration Status
            </h2>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--space-lg);">
            <div style="display: flex; align-items: center; gap: var(--space-md);">
                <span class="badge badge-error" id="slack-connection-badge">Disconnected</span>
                <span id="slack-workspace" style="color: var(--text-secondary);">No workspace connected</span>
            </div>
            <div style="display: flex; gap: var(--space-sm);">
                <button id="test-slack-connection" class="btn btn-secondary btn-sm" disabled>
                    <i class="ti ti-wifi"></i>
                    Test Connection
                </button>
                <button id="configure-slack" class="btn btn-primary btn-sm">
                    <i class="ti ti-settings"></i>
                    Configure
                </button>
            </div>
        </div>
        <div class="grid grid-4">
            <div class="detail-item">
                <span class="detail-label">Bot Status:</span>
                <span class="detail-value" id="slack-bot-status">Not Connected</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Channels:</span>
                <span class="detail-value" id="slack-channels-count">0</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Last Activity:</span>
                <span class="detail-value" id="slack-last-activity">Never</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Features:</span>
                <span class="detail-value">Alerts, Status, Commands</span>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="ti ti-zap"></i>
                Quick Actions
            </h2>
        </div>
        <div class="grid grid-4">
            <button class="action-card" id="create-project-action">
                <div class="action-icon">
                    <i class="ti ti-folder-plus"></i>
                </div>
                <div class="action-title">New Project</div>
                <div class="action-desc">Create a new project</div>
            </button>
            <button class="action-card" id="open-workspace-action">
                <div class="action-icon">
                    <i class="ti ti-rocket"></i>
                </div>
                <div class="action-title">Open Workspace</div>
                <div class="action-desc">Launch workspace interface</div>
            </button>
            <button class="action-card" id="view-projects-action">
                <div class="action-icon">
                    <i class="ti ti-folders"></i>
                </div>
                <div class="action-title">Manage Projects</div>
                <div class="action-desc">View and manage all projects</div>
            </button>
            <button class="action-card" id="view-logs-action">
                <div class="action-icon">
                    <i class="ti ti-file-text"></i>
                </div>
                <div class="action-title">View Logs</div>
                <div class="action-desc">Check system logs</div>
            </button>
        </div>
    </div>

    <!-- Charts -->
    <div class="grid grid-2">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="ti ti-chart-line"></i>
                    Usage Trend (24 Hours)
                </h3>
            </div>
            <div style="position: relative; height: 300px;">
                <canvas id="usage-chart"></canvas>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h3 class="card-title">
                    <i class="ti ti-activity"></i>
                    Request Rate
                </h3>
            </div>
            <div style="position: relative; height: 300px;">
                <canvas id="request-chart"></canvas>
            </div>
        </div>
    </div>

    <!-- Recent Alerts -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="ti ti-bell"></i>
                Recent Alerts
            </h2>
        </div>
        <div id="alerts-list" class="alerts-list">
            <div class="alert alert-info">
                <i class="ti ti-info-circle"></i>
                System initialized successfully
            </div>
        </div>
    </div>

    <!-- System Status -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="ti ti-server"></i>
                System Status
            </h2>
        </div>
        <div class="grid grid-4">
            <div class="detail-item">
                <span class="detail-label">Daemon Status:</span>
                <span class="detail-value success" id="daemon-status">Running</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Uptime:</span>
                <span class="detail-value" id="uptime">0h 0m</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Memory Usage:</span>
                <span class="detail-value" id="memory-usage">0 MB</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Version:</span>
                <span class="detail-value">1.0.0</span>
            </div>
        </div>
    </div>

    <style>
        /* Dashboard-specific styles */
        .workspace-details {
            display: flex;
            flex-direction: column;
            gap: var(--space-sm);
        }

        .detail-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: var(--space-xs) 0;
            border-bottom: 1px solid var(--border-muted);
        }

        .detail-item:last-child {
            border-bottom: none;
        }

        .detail-label {
            color: var(--text-secondary);
            font-size: var(--font-size-sm);
            font-weight: 500;
        }

        .detail-value {
            color: var(--text-primary);
            font-weight: 500;
        }

        .detail-value.success {
            color: var(--success);
        }

        .badge {
            padding: var(--space-xs) var(--space-sm);
            border-radius: var(--radius-full);
            font-size: var(--font-size-xs);
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .badge-primary {
            background: var(--accent-primary);
            color: white;
        }

        .badge-secondary {
            background: var(--bg-quaternary);
            color: var(--text-secondary);
        }

        .badge-success {
            background: var(--success);
            color: white;
        }

        .badge-error {
            background: var(--error);
            color: white;
        }

        .action-card {
            background: var(--bg-tertiary);
            border: 1px solid var(--border);
            border-radius: var(--radius-lg);
            padding: var(--space-lg);
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            flex-direction: column;
            gap: var(--space-sm);
            align-items: center;
        }

        .action-card:hover {
            border-color: var(--accent-primary);
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .action-icon {
            width: 48px;
            height: 48px;
            background: var(--gradient-primary);
            border-radius: var(--radius-lg);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
        }

        .action-title {
            font-weight: 600;
            color: var(--text-primary);
        }

        .action-desc {
            font-size: var(--font-size-sm);
            color: var(--text-secondary);
        }

        .alerts-list {
            display: flex;
            flex-direction: column;
            gap: var(--space-sm);
        }

        @media (max-width: 768px) {
            .grid-4 {
                grid-template-columns: repeat(2, 1fr);
            }

            .grid-3 {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 480px) {
            .grid-4 {
                grid-template-columns: 1fr;
            }
        }
    </style>

    <script>
        // Dashboard-specific JavaScript
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            loadDashboardData();
            setupEventListeners();
            startRealTimeUpdates();
        });

        function initializeCharts() {
            // Usage Chart
            const usageCtx = document.getElementById('usage-chart').getContext('2d');
            window.usageChart = new Chart(usageCtx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Token Usage',
                        data: [],
                        borderColor: '#2f81f7',
                        backgroundColor: 'rgba(47, 129, 247, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: '#30363d'
                            },
                            ticks: {
                                color: '#7d8590'
                            }
                        },
                        x: {
                            grid: {
                                color: '#30363d'
                            },
                            ticks: {
                                color: '#7d8590',
                                maxTicksLimit: 12
                            }
                        }
                    }
                }
            });

            // Request Chart
            const requestCtx = document.getElementById('request-chart').getContext('2d');
            window.requestChart = new Chart(requestCtx, {
                type: 'bar',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Requests',
                        data: [],
                        backgroundColor: 'rgba(47, 129, 247, 0.8)',
                        borderColor: '#2f81f7',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: '#30363d'
                            },
                            ticks: {
                                color: '#7d8590'
                            }
                        },
                        x: {
                            grid: {
                                color: '#30363d'
                            },
                            ticks: {
                                color: '#7d8590',
                                maxTicksLimit: 8
                            }
                        }
                    }
                }
            });

            // Load historical data for charts
            loadChartData();
        }

        function loadChartData() {
            // Load usage history for chart
            fetch('/api/usage/history?hours=24')
                .then(response => response.json())
                .then(result => {
                    if (result.success && result.data.length > 0) {
                        updateUsageChart(result.data);
                    }
                })
                .catch(error => console.error('Error loading usage history:', error));

            // Load request stats for chart
            fetch('/api/usage/stats?period=day')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        updateRequestChart(result.data);
                    }
                })
                .catch(error => console.error('Error loading request stats:', error));
        }

        function updateUsageChart(data) {
            const labels = data.map(item => {
                const date = new Date(item.timestamp);
                return date.getHours() + ':' + String(date.getMinutes()).padStart(2, '0');
            });
            const tokenData = data.map(item => item.tokens || 0);

            window.usageChart.data.labels = labels;
            window.usageChart.data.datasets[0].data = tokenData;
            window.usageChart.update();
        }

        function updateRequestChart(statsData) {
            // Create hourly distribution from stats
            const hours = Array.from({length: 12}, (_, i) => {
                const hour = (new Date().getHours() - 11 + i) % 24;
                return hour + ':00';
            });

            // Generate sample request data (in production, this would come from real data)
            const requestData = hours.map(() => Math.floor(Math.random() * 20 + 5));

            window.requestChart.data.labels = hours;
            window.requestChart.data.datasets[0].data = requestData;
            window.requestChart.update();
        }

        function loadDashboardData() {
            // Load usage data
            fetch('/api/usage/current')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        updateUsageStats(result.data);
                    }
                })
                .catch(error => console.error('Error loading usage data:', error));

            // Load system status
            fetch('/api/system/status')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        updateSystemStatus(result.data);
                    }
                })
                .catch(error => console.error('Error loading system data:', error));

            // Load project stats
            fetch('/api/projects')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        updateProjectStats(result.data);
                    }
                })
                .catch(error => console.error('Error loading project data:', error));

            // Load alerts
            fetch('/api/alerts')
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        updateAlerts(result.data);
                    }
                })
                .catch(error => console.error('Error loading alerts:', error));
        }

        function updateUsageStats(data) {
            document.getElementById('current-tokens').textContent = formatNumber(data.tokens || 0);
            document.getElementById('requests-hour').textContent = formatNumber(data.requests_per_hour || 0);

            const usagePercent = Math.round((data.tokens || 0) / (data.monthly_limit || 100000) * 100);
            document.getElementById('usage-percent').textContent = usagePercent + '%';

            const progressBar = document.getElementById('usage-progress');
            progressBar.style.width = usagePercent + '%';

            // Update change indicators
            const tokensChange = data.tokens_change || 0;
            const requestsChange = data.requests_change || 0;

            updateChangeIndicator('tokens-change', tokensChange);
            updateChangeIndicator('requests-change', requestsChange);

            // Update time remaining
            if (data.time_remaining_hours !== undefined) {
                const hours = Math.floor(data.time_remaining_hours);
                const minutes = Math.floor((data.time_remaining_hours % 1) * 60);
                document.getElementById('time-remaining').textContent = hours > 0 ? hours + 'h ' + minutes + 'm' : 'N/A';
            }
        }

        function updateSystemStatus(data) {
            // Update uptime
            const uptimeHours = Math.floor(data.uptime.process / 3600);
            const uptimeMinutes = Math.floor((data.uptime.process % 3600) / 60);
            document.getElementById('uptime').textContent = uptimeHours + 'h ' + uptimeMinutes + 'm';

            // Update memory usage
            const memoryMB = Math.round(data.memory.heapUsed / 1024 / 1024);
            document.getElementById('memory-usage').textContent = memoryMB + ' MB';

            // Update daemon status
            document.getElementById('daemon-status').textContent = 'Running';
            document.getElementById('daemon-status').className = 'detail-value success';
        }

        function updateProjectStats(data) {
            const activeProjects = data.filter(p => p.status === 'active').length;
            const activeProject = data.find(p => p.status === 'active');

            if (activeProject) {
                document.getElementById('active-project-name').textContent = activeProject.name;
                document.getElementById('active-project-path').textContent = activeProject.path || '--';
                document.getElementById('active-project-priority').textContent = activeProject.priority || 'Normal';
                document.getElementById('active-project-activity').textContent =
                    activeProject.last_activity ? new Date(activeProject.last_activity).toLocaleString() : '--';

                const badge = document.getElementById('project-status-badge');
                badge.textContent = 'Active';
                badge.className = 'badge badge-success';

                document.getElementById('open-workspace-btn').disabled = false;
            }
        }

        function updateAlerts(alerts) {
            const alertsList = document.getElementById('alerts-list');
            alertsList.innerHTML = '';

            if (alerts.length === 0) {
                alertsList.innerHTML = '<div class="alert alert-info"><i class="ti ti-info-circle"></i>No recent alerts</div>';
                return;
            }

            alerts.slice(0, 5).forEach(alert => {
                const alertElement = document.createElement('div');
                alertElement.className = 'alert alert-' + (alert.type || 'info');
                alertElement.innerHTML =
                    '<i class="ti ti-' + getAlertIcon(alert.type) + '"></i>' +
                    '<div>' +
                        '<strong>' + (alert.title || 'Alert') + '</strong>' +
                        '<p>' + alert.message + '</p>' +
                        '<small>' + new Date(alert.timestamp).toLocaleString() + '</small>' +
                    '</div>';
                alertsList.appendChild(alertElement);
            });
        }

        function updateChangeIndicator(elementId, change) {
            const element = document.getElementById(elementId);
            if (change > 0) {
                element.textContent = '+' + change.toFixed(1) + '%';
                element.className = 'stat-change positive';
            } else if (change < 0) {
                element.textContent = change.toFixed(1) + '%';
                element.className = 'stat-change negative';
            } else {
                element.textContent = '0%';
                element.className = 'stat-change';
            }
        }

        function formatNumber(num) {
            if (num >= 1000000) {
                return (num / 1000000).toFixed(1) + 'M';
            } else if (num >= 1000) {
                return (num / 1000).toFixed(1) + 'K';
            }
            return num.toString();
        }

        function setupEventListeners() {
            // Quick action buttons
            document.getElementById('create-project-action').addEventListener('click', () => {
                window.location.href = '/projects?action=create';
            });

            document.getElementById('open-workspace-action').addEventListener('click', () => {
                window.location.href = '/workspace-vscode';
            });

            document.getElementById('view-projects-action').addEventListener('click', () => {
                window.location.href = '/projects';
            });

            document.getElementById('view-logs-action').addEventListener('click', () => {
                window.location.href = '/logs';
            });

            document.getElementById('configure-slack').addEventListener('click', () => {
                window.location.href = '/slack-config';
            });
        }

        function startRealTimeUpdates() {
            // Update every 30 seconds
            setInterval(loadDashboardData, 30000);
        }

        // Socket.IO event listeners
        if (window.socket) {
            socket.on('usage-update', updateUsageStats);

            socket.on('alert', (alert) => {
                addAlert(alert);
            });
        }

        function addAlert(alert) {
            const alertsList = document.getElementById('alerts-list');
            const alertElement = document.createElement('div');
            alertElement.className = \`alert alert-\${alert.type || 'info'}\`;
            alertElement.innerHTML = \`
                <i class="ti ti-\${getAlertIcon(alert.type)}"></i>
                \${alert.message}
            \`;
            alertsList.insertBefore(alertElement, alertsList.firstChild);

            // Remove old alerts if more than 5
            while (alertsList.children.length > 5) {
                alertsList.removeChild(alertsList.lastChild);
            }
        }

        function getAlertIcon(type) {
            switch (type) {
                case 'success': return 'check-circle';
                case 'warning': return 'alert-triangle';
                case 'error': return 'x-circle';
                default: return 'info-circle';
            }
        }
    </script>
    `
}) %>