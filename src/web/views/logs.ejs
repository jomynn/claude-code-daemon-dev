<%
// Set layout variables
const pageTitle = 'System Logs';
const pageDescription = 'Monitor real-time system logs, errors, and debug information from your Claude Code Daemon.';
%>

<%- include('partials/layout', {
    title,
    env,
    currentPage,
    pageTitle,
    pageDescription,
    body: `
    <!-- Log Controls -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="ti ti-settings"></i>
                Log Controls
            </h2>
        </div>
        <div class="grid grid-4">
            <div class="form-group">
                <label class="form-label">Log Level</label>
                <select class="form-input" id="log-level">
                    <option value="all">All Levels</option>
                    <option value="error">Error</option>
                    <option value="warn">Warning</option>
                    <option value="info">Info</option>
                    <option value="debug">Debug</option>
                </select>
            </div>
            <div class="form-group">
                <label class="form-label">Source</label>
                <select class="form-input" id="log-source">
                    <option value="all">All Sources</option>
                    <option value="api">API Server</option>
                    <option value="daemon">Daemon</option>
                    <option value="claude">Claude Code</option>
                    <option value="bmad">BMAD</option>
                </select>
            </div>
            <div class="form-group">
                <label class="form-label">Auto Refresh</label>
                <select class="form-input" id="auto-refresh">
                    <option value="5">5 seconds</option>
                    <option value="10">10 seconds</option>
                    <option value="30">30 seconds</option>
                    <option value="0">Manual</option>
                </select>
            </div>
            <div style="display: flex; gap: var(--space-sm); align-items: end;">
                <button class="btn btn-primary">
                    <i class="ti ti-refresh"></i>
                    Refresh
                </button>
                <button class="btn btn-secondary">
                    <i class="ti ti-trash"></i>
                    Clear
                </button>
            </div>
        </div>
    </div>

    <!-- Live Logs -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="ti ti-file-text"></i>
                Live Logs
            </h2>
            <div style="display: flex; align-items: center; gap: var(--space-sm);">
                <span class="status-dot status-online"></span>
                <span style="color: var(--text-secondary); font-size: var(--font-size-sm);">
                    Auto-updating every 5 seconds
                </span>
            </div>
        </div>
        <div class="logs-container" id="logs-container">
            <!-- Live logs will be loaded here -->
            <div class="loading-logs" style="text-align: center; padding: var(--space-lg); color: var(--text-secondary);">
                <i class="ti ti-loader" style="font-size: 24px; margin-bottom: var(--space-sm); animation: spin 1s linear infinite;"></i>
                <p>Loading logs...</p>
            </div>
        </div>
    </div>

    <!-- Log Statistics -->
    <div class="grid grid-4">
        <div class="stat-card">
            <div class="stat-value" id="total-logs">1,247</div>
            <div class="stat-label">Total Logs Today</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="error-logs">12</div>
            <div class="stat-label">Errors</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="warning-logs">45</div>
            <div class="stat-label">Warnings</div>
        </div>
        <div class="stat-card">
            <div class="stat-value" id="log-rate">2.3/s</div>
            <div class="stat-label">Current Rate</div>
        </div>
    </div>

    <style>
        .logs-container {
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: var(--radius-md);
            padding: var(--space-md);
            font-family: var(--font-mono);
            font-size: var(--font-size-sm);
            max-height: 500px;
            overflow-y: auto;
        }

        .log-entry {
            display: grid;
            grid-template-columns: 80px 60px 80px 1fr;
            gap: var(--space-md);
            padding: var(--space-xs) var(--space-sm);
            margin-bottom: var(--space-xs);
            border-radius: var(--radius-sm);
            border-left: 3px solid transparent;
            transition: var(--transition);
        }

        .log-entry:hover {
            background: var(--surface-hover);
        }

        .log-info {
            border-left-color: var(--info);
        }

        .log-success {
            border-left-color: var(--success);
        }

        .log-warning {
            border-left-color: var(--warning);
        }

        .log-error {
            border-left-color: var(--error);
        }

        .log-time {
            color: var(--text-muted);
            font-weight: 500;
        }

        .log-level {
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .log-info .log-level {
            color: var(--info);
        }

        .log-success .log-level {
            color: var(--success);
        }

        .log-warning .log-level {
            color: var(--warning);
        }

        .log-error .log-level {
            color: var(--error);
        }

        .log-source {
            color: var(--text-secondary);
            font-weight: 500;
        }

        .log-message {
            color: var(--text-primary);
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            display: inline-block;
        }

        .status-online {
            background: var(--success);
        }
    </style>

    <script>
        let socket;
        let currentFilters = {
            level: 'all',
            source: 'all',
            autoRefresh: 5
        };

        document.addEventListener('DOMContentLoaded', function() {
            initializeLogControls();
            loadLogs();
            setupAutoRefresh();
            connectWebSocket();
        });

        function initializeLogControls() {
            // Log level filter
            document.getElementById('log-level').addEventListener('change', function(e) {
                currentFilters.level = e.target.value;
                loadLogs();
            });

            // Log source filter
            document.getElementById('log-source').addEventListener('change', function(e) {
                currentFilters.source = e.target.value;
                loadLogs();
            });

            // Auto refresh setting
            document.getElementById('auto-refresh').addEventListener('change', function(e) {
                currentFilters.autoRefresh = parseInt(e.target.value);
                setupAutoRefresh();
                updateAutoRefreshStatus();
            });

            // Manual refresh button
            document.querySelector('.btn-primary').addEventListener('click', function() {
                loadLogs();
            });

            // Clear logs button
            document.querySelector('.btn-secondary').addEventListener('click', function() {
                clearLogs();
            });
        }

        function loadLogs() {
            const params = new URLSearchParams();
            if (currentFilters.level !== 'all') params.append('level', currentFilters.level);
            if (currentFilters.source !== 'all') params.append('source', currentFilters.source);
            params.append('limit', '100');

            fetch('/api/logs?' + params.toString())
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        displayLogs(result.data.logs);
                        updateLogStats(result.data.stats);
                    } else {
                        showError('Failed to load logs: ' + result.error);
                    }
                })
                .catch(error => {
                    console.error('Error loading logs:', error);
                    showError('Failed to load logs');
                });
        }

        function displayLogs(logs) {
            const container = document.getElementById('logs-container');

            if (!logs || logs.length === 0) {
                container.innerHTML = '<div style="text-align: center; padding: var(--space-lg); color: var(--text-secondary);">No logs found</div>';
                return;
            }

            container.innerHTML = '';
            logs.forEach(log => {
                const logEntry = createLogEntry(log);
                container.appendChild(logEntry);
            });

            // Scroll to bottom for latest logs
            container.scrollTop = container.scrollHeight;
        }

        function createLogEntry(log) {
            const entry = document.createElement('div');
            entry.className = 'log-entry log-' + (log.level || 'info').toLowerCase();

            const timestamp = new Date(log.timestamp).toLocaleTimeString();
            const level = (log.level || 'INFO').toUpperCase();
            const source = log.source || 'system';
            const message = log.message || 'No message';

            entry.innerHTML = \`
                <div class="log-time">\${timestamp}</div>
                <div class="log-level">\${level}</div>
                <div class="log-source">\${source}</div>
                <div class="log-message">\${message}</div>
            \`;

            return entry;
        }

        function updateLogStats(stats) {
            if (stats) {
                document.getElementById('total-logs').textContent = stats.total || '0';
                document.getElementById('error-logs').textContent = stats.errors || '0';
                document.getElementById('warning-logs').textContent = stats.warnings || '0';
                document.getElementById('log-rate').textContent = (stats.rate || 0).toFixed(1) + '/s';
            }
        }

        function clearLogs() {
            if (confirm('Are you sure you want to clear all logs?')) {
                fetch('/api/logs/clear', { method: 'POST' })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            loadLogs();
                        } else {
                            alert('Failed to clear logs: ' + result.error);
                        }
                    })
                    .catch(error => {
                        console.error('Error clearing logs:', error);
                        alert('Failed to clear logs');
                    });
            }
        }

        function setupAutoRefresh() {
            // Clear existing interval
            if (window.logRefreshInterval) {
                clearInterval(window.logRefreshInterval);
            }

            if (currentFilters.autoRefresh > 0) {
                window.logRefreshInterval = setInterval(loadLogs, currentFilters.autoRefresh * 1000);
            }
        }

        function updateAutoRefreshStatus() {
            const statusText = document.querySelector('.card-header span');
            if (currentFilters.autoRefresh > 0) {
                statusText.textContent = \`Auto-updating every \${currentFilters.autoRefresh} seconds\`;
                document.querySelector('.status-dot').className = 'status-dot status-online';
            } else {
                statusText.textContent = 'Manual refresh mode';
                document.querySelector('.status-dot').className = 'status-dot';
            }
        }

        function connectWebSocket() {
            try {
                socket = io();

                socket.on('connect', function() {
                    console.log('Connected to log stream');
                });

                socket.on('new-log', function(log) {
                    // Check if log matches current filters
                    if (matchesFilters(log)) {
                        appendNewLog(log);
                        updateLogStatsIncremental(log);
                    }
                });

                socket.on('disconnect', function() {
                    console.log('Disconnected from log stream');
                });
            } catch (error) {
                console.log('WebSocket not available, using polling only');
            }
        }

        function matchesFilters(log) {
            if (currentFilters.level !== 'all' && log.level !== currentFilters.level) {
                return false;
            }
            if (currentFilters.source !== 'all' && log.source !== currentFilters.source) {
                return false;
            }
            return true;
        }

        function appendNewLog(log) {
            const container = document.getElementById('logs-container');
            const logEntry = createLogEntry(log);

            // Add to top of container
            container.insertBefore(logEntry, container.firstChild);

            // Remove old logs if too many
            const maxLogs = 100;
            while (container.children.length > maxLogs) {
                container.removeChild(container.lastChild);
            }
        }

        function updateLogStatsIncremental(log) {
            const totalElement = document.getElementById('total-logs');
            const errorElement = document.getElementById('error-logs');
            const warningElement = document.getElementById('warning-logs');

            const currentTotal = parseInt(totalElement.textContent) || 0;
            totalElement.textContent = currentTotal + 1;

            if (log.level === 'error') {
                const currentErrors = parseInt(errorElement.textContent) || 0;
                errorElement.textContent = currentErrors + 1;
            } else if (log.level === 'warn' || log.level === 'warning') {
                const currentWarnings = parseInt(warningElement.textContent) || 0;
                warningElement.textContent = currentWarnings + 1;
            }
        }

        function showError(message) {
            const container = document.getElementById('logs-container');
            container.innerHTML = \`
                <div style="text-align: center; padding: var(--space-lg); color: var(--error);">
                    <i class="ti ti-alert-circle" style="font-size: 24px; margin-bottom: var(--space-sm);"></i>
                    <p>\${message}</p>
                </div>
            \`;
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            if (window.logRefreshInterval) {
                clearInterval(window.logRefreshInterval);
            }
            if (socket) {
                socket.disconnect();
            }
        });
    </script>
    `
}) %>