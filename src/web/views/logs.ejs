<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/static/css/dashboard.css">
    <style>
        .logs-container {
            padding: 20px;
        }

        .logs-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #ddd;
        }

        .logs-controls {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        .logs-viewer {
            background: #1e1e1e;
            color: #d4d4d4;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 12px;
            padding: 15px;
            border-radius: 5px;
            height: 500px;
            overflow-y: auto;
            border: 1px solid #333;
        }

        .log-line {
            margin-bottom: 2px;
            white-space: pre-wrap;
            word-break: break-all;
        }

        .log-line.error {
            color: #f14c4c;
        }

        .log-line.warn {
            color: #ffcc02;
        }

        .log-line.info {
            color: #22aaff;
        }

        .log-line.debug {
            color: #888;
        }

        .logs-stats {
            display: flex;
            gap: 20px;
            margin-bottom: 15px;
        }

        .stat-card {
            background: #f8f9fa;
            padding: 10px 15px;
            border-radius: 5px;
            border: 1px solid #dee2e6;
            text-align: center;
            min-width: 100px;
        }

        .stat-value {
            font-size: 18px;
            font-weight: bold;
            color: #495057;
        }

        .stat-label {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            text-decoration: none;
            display: inline-block;
        }

        .btn-primary {
            background: #007bff;
            color: white;
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-small {
            padding: 5px 10px;
            font-size: 12px;
        }

        .status-live {
            color: #28a745;
            font-weight: bold;
        }

        .status-stopped {
            color: #dc3545;
            font-weight: bold;
        }

        .filter-controls {
            margin-bottom: 10px;
        }

        .filter-controls select,
        .filter-controls input {
            padding: 5px 10px;
            margin-right: 10px;
            border: 1px solid #ddd;
            border-radius: 3px;
        }
    </style>
</head>
<body>
    <div class="logs-container">
        <header>
            <h1>Container Logs</h1>
            <%- include('partials/navigation') %>
            <div class="logs-controls">
                <span id="stream-status" class="status-stopped">‚óè</span>
                <button id="toggle-stream" class="btn btn-primary">Start Live Stream</button>
                <button id="refresh-logs" class="btn btn-secondary">Refresh</button>
                <button id="clear-logs" class="btn btn-secondary btn-small">Clear</button>
            </div>
            <div class="status-indicator">
                <span id="connection-status" class="status-dot"></span>
                <span>Live</span>
            </div>
        </header>

        <div class="logs-stats">
            <div class="stat-card">
                <div class="stat-value" id="container-status">Checking...</div>
                <div class="stat-label">Container Status</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="log-count">0</div>
                <div class="stat-label">Log Lines</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="error-count">0</div>
                <div class="stat-label">Errors</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="last-update">Never</div>
                <div class="stat-label">Last Update</div>
            </div>
        </div>

        <div class="filter-controls">
            <select id="log-level">
                <option value="all">All Levels</option>
                <option value="error">Errors Only</option>
                <option value="warn">Warnings</option>
                <option value="info">Info</option>
                <option value="debug">Debug</option>
            </select>
            <input type="text" id="search-filter" placeholder="Search logs..." />
            <select id="log-limit">
                <option value="50">Last 50 lines</option>
                <option value="100" selected>Last 100 lines</option>
                <option value="500">Last 500 lines</option>
                <option value="1000">Last 1000 lines</option>
            </select>
        </div>

        <div class="logs-viewer" id="logs-viewer">
            <div class="log-line">Loading logs...</div>
        </div>
    </div>

    <script>
        class LogsViewer {
            constructor() {
                this.isStreaming = false;
                this.eventSource = null;
                this.logs = [];
                this.filteredLogs = [];
                this.init();
            }

            init() {
                this.setupEventListeners();
                this.loadLogs();
                this.updateContainerStatus();
            }

            setupEventListeners() {
                document.getElementById('toggle-stream').addEventListener('click', () => {
                    this.toggleStream();
                });

                document.getElementById('refresh-logs').addEventListener('click', () => {
                    this.loadLogs();
                });

                document.getElementById('clear-logs').addEventListener('click', () => {
                    this.clearLogs();
                });

                document.getElementById('log-level').addEventListener('change', () => {
                    this.filterLogs();
                });

                document.getElementById('search-filter').addEventListener('input', () => {
                    this.filterLogs();
                });

                document.getElementById('log-limit').addEventListener('change', () => {
                    this.loadLogs();
                });
            }

            async loadLogs() {
                try {
                    const limit = document.getElementById('log-limit').value;
                    const response = await fetch(`/api/logs/container?limit=${limit}`);
                    const result = await response.json();

                    if (result.success) {
                        this.logs = result.data.logs.map(log => this.parseLogLine(log));
                        this.updateStats();
                        this.filterLogs();
                    } else {
                        this.displayError('Failed to load logs: ' + result.error);
                    }
                } catch (error) {
                    this.displayError('Error loading logs: ' + error.message);
                }
            }

            parseLogLine(logText) {
                const timestamp = new Date();
                let level = 'info';
                let message = logText;

                // Try to parse JSON logs
                try {
                    const parsed = JSON.parse(logText);
                    if (parsed.level) level = parsed.level;
                    if (parsed.message) message = parsed.message;
                    if (parsed.timestamp) timestamp = new Date(parsed.timestamp);
                } catch (e) {
                    // Not JSON, parse as plain text
                    if (logText.includes('ERROR') || logText.includes('error')) level = 'error';
                    else if (logText.includes('WARN') || logText.includes('warn')) level = 'warn';
                    else if (logText.includes('DEBUG') || logText.includes('debug')) level = 'debug';
                }

                return { timestamp, level, message, raw: logText };
            }

            filterLogs() {
                const levelFilter = document.getElementById('log-level').value;
                const searchFilter = document.getElementById('search-filter').value.toLowerCase();

                this.filteredLogs = this.logs.filter(log => {
                    if (levelFilter !== 'all' && log.level !== levelFilter) return false;
                    if (searchFilter && !log.message.toLowerCase().includes(searchFilter)) return false;
                    return true;
                });

                this.displayLogs();
            }

            displayLogs() {
                const viewer = document.getElementById('logs-viewer');

                if (this.filteredLogs.length === 0) {
                    viewer.innerHTML = '<div class="log-line">No logs to display</div>';
                    return;
                }

                const html = this.filteredLogs.map(log => {
                    const timeStr = log.timestamp.toLocaleTimeString();
                    return `<div class="log-line ${log.level}">[${timeStr}] ${log.message}</div>`;
                }).join('');

                viewer.innerHTML = html;
                viewer.scrollTop = viewer.scrollHeight;
            }

            displayError(message) {
                const viewer = document.getElementById('logs-viewer');
                viewer.innerHTML = `<div class="log-line error">${message}</div>`;
            }

            toggleStream() {
                if (this.isStreaming) {
                    this.stopStream();
                } else {
                    this.startStream();
                }
            }

            startStream() {
                this.eventSource = new EventSource('/api/logs/stream');
                this.isStreaming = true;

                document.getElementById('toggle-stream').textContent = 'Stop Stream';
                document.getElementById('stream-status').className = 'status-live';

                this.eventSource.onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    const log = this.parseLogLine(data.message);
                    this.logs.push(log);

                    // Keep only last 1000 logs
                    if (this.logs.length > 1000) {
                        this.logs = this.logs.slice(-1000);
                    }

                    this.updateStats();
                    this.filterLogs();
                };

                this.eventSource.onerror = () => {
                    this.stopStream();
                    this.displayError('Stream connection lost');
                };
            }

            stopStream() {
                if (this.eventSource) {
                    this.eventSource.close();
                    this.eventSource = null;
                }

                this.isStreaming = false;
                document.getElementById('toggle-stream').textContent = 'Start Live Stream';
                document.getElementById('stream-status').className = 'status-stopped';
            }

            clearLogs() {
                this.logs = [];
                this.filteredLogs = [];
                this.displayLogs();
                this.updateStats();
            }

            updateStats() {
                document.getElementById('log-count').textContent = this.logs.length;
                document.getElementById('error-count').textContent =
                    this.logs.filter(log => log.level === 'error').length;
                document.getElementById('last-update').textContent =
                    new Date().toLocaleTimeString();
            }

            async updateContainerStatus() {
                try {
                    const response = await fetch('/api/system/status');
                    const result = await response.json();

                    if (result.success) {
                        document.getElementById('container-status').textContent = 'Running';
                        document.getElementById('container-status').style.color = '#28a745';
                    } else {
                        document.getElementById('container-status').textContent = 'Unknown';
                        document.getElementById('container-status').style.color = '#ffc107';
                    }
                } catch (error) {
                    document.getElementById('container-status').textContent = 'Error';
                    document.getElementById('container-status').style.color = '#dc3545';
                }
            }
        }

        // Initialize logs viewer when page loads
        document.addEventListener('DOMContentLoaded', () => {
            new LogsViewer();
        });
    </script>
</body>
</html>