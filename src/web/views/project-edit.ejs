<%
// Set layout variables
const pageTitle = 'Edit Project';
const pageDescription = 'Edit project settings, configuration, and management options.';
%>

<%- include('partials/layout', {
    title,
    env,
    currentPage,
    pageTitle,
    pageDescription,
    body: `
    <!-- Project Edit Form -->
    <div class="container">
        <div class="card">
            <div class="card-header">
                <h2 class="card-title">
                    <i class="ti ti-settings"></i>
                    Edit Project
                </h2>
                <div style="display: flex; gap: var(--space-sm);">
                    <a href="/projects" class="btn btn-secondary">
                        <i class="ti ti-arrow-left"></i>
                        Back to Projects
                    </a>
                    <button class="btn btn-secondary" id="delete-project">
                        <i class="ti ti-trash"></i>
                        Delete Project
                    </button>
                </div>
            </div>

            <!-- Loading State -->
            <div id="loading-state" class="loading-state">
                <div class="spinner"></div>
                <p>Loading project details...</p>
            </div>

            <form id="edit-project-form" class="form" style="display: none;">
                <!-- Basic Information -->
                <div class="form-section">
                    <h3>Basic Information</h3>

                    <div class="grid grid-2">
                        <div class="form-group">
                            <label class="form-label" for="project-name">Project Name *</label>
                            <input type="text" id="project-name" name="name" class="form-input" required>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="project-priority">Priority</label>
                            <select id="project-priority" name="priority" class="form-select">
                                <option value="low">Low</option>
                                <option value="medium">Medium</option>
                                <option value="high">High</option>
                                <option value="critical">Critical</option>
                            </select>
                        </div>
                    </div>

                    <div class="grid grid-2">
                        <div class="form-group">
                            <label class="form-label" for="project-status">Project Status</label>
                            <select id="project-status" name="projectStatus" class="form-select">
                                <option value="active">Active</option>
                                <option value="paused">Paused</option>
                                <option value="completed">Completed</option>
                                <option value="archived">Archived</option>
                                <option value="maintenance">Maintenance</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="project-type">Project Type</label>
                            <select id="project-type" name="type" class="form-select">
                                <option value="web">Web Application</option>
                                <option value="mobile">Mobile Application</option>
                                <option value="desktop">Desktop Application</option>
                                <option value="api">API/Backend</option>
                                <option value="library">Library/Package</option>
                                <option value="data">Data Science</option>
                                <option value="other">Other</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="project-description">Description</label>
                        <textarea id="project-description" name="description" class="form-textarea"></textarea>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="target-folder">Target Folder</label>
                        <div class="input-group">
                            <input type="text" id="target-folder" name="targetFolder" class="form-input" readonly>
                            <button type="button" class="btn btn-secondary" id="open-folder">
                                <i class="ti ti-external-link"></i>
                                Open
                            </button>
                        </div>
                        <small class="form-help">Project folder location cannot be changed after creation</small>
                    </div>

                    <div class="form-group" id="github-repo-group" style="display: none;">
                        <label class="form-label" for="github-repo">GitHub Repository</label>
                        <div class="input-group">
                            <input type="url" id="github-repo" name="githubRepo" class="form-input" readonly>
                            <button type="button" class="btn btn-secondary" id="open-repo">
                                <i class="ti ti-external-link"></i>
                                Open
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Project Statistics -->
                <div class="form-section">
                    <h3>Project Statistics</h3>

                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-icon">
                                <i class="ti ti-calendar"></i>
                            </div>
                            <div class="stat-content">
                                <div class="stat-label">Created</div>
                                <div class="stat-value" id="stat-created">Loading...</div>
                            </div>
                        </div>

                        <div class="stat-item">
                            <div class="stat-icon">
                                <i class="ti ti-clock"></i>
                            </div>
                            <div class="stat-content">
                                <div class="stat-label">Last Modified</div>
                                <div class="stat-value" id="stat-modified">Loading...</div>
                            </div>
                        </div>

                        <div class="stat-item">
                            <div class="stat-icon">
                                <i class="ti ti-files"></i>
                            </div>
                            <div class="stat-content">
                                <div class="stat-label">Files Count</div>
                                <div class="stat-value" id="stat-files">Loading...</div>
                            </div>
                        </div>

                        <div class="stat-item">
                            <div class="stat-icon">
                                <i class="ti ti-database"></i>
                            </div>
                            <div class="stat-content">
                                <div class="stat-label">Project Size</div>
                                <div class="stat-value" id="stat-size">Loading...</div>
                            </div>
                        </div>

                        <div class="stat-item">
                            <div class="stat-icon">
                                <i class="ti ti-git-branch"></i>
                            </div>
                            <div class="stat-content">
                                <div class="stat-label">Git Status</div>
                                <div class="stat-value" id="stat-git">Loading...</div>
                            </div>
                        </div>

                        <div class="stat-item">
                            <div class="stat-icon">
                                <i class="ti ti-package"></i>
                            </div>
                            <div class="stat-content">
                                <div class="stat-label">Dependencies</div>
                                <div class="stat-value" id="stat-deps">Loading...</div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Claude Configuration -->
                <div class="form-section">
                    <h3>Claude Code Configuration</h3>

                    <div class="form-group">
                        <label class="form-checkbox">
                            <input type="checkbox" id="claude-enabled" name="claudeEnabled">
                            <span class="checkmark"></span>
                            Enable Claude Code Assistant
                        </label>
                    </div>

                    <div id="claude-config" class="claude-config">
                        <div class="grid grid-2">
                            <div class="form-group">
                                <label class="form-label" for="claude-model">Model</label>
                                <select id="claude-model" name="claudeModel" class="form-select">
                                    <option value="claude-3-5-sonnet-20241022">Claude 3.5 Sonnet</option>
                                    <option value="claude-3-opus-20240229">Claude 3 Opus</option>
                                    <option value="claude-3-haiku-20240307">Claude 3 Haiku</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="form-label" for="max-tokens">Max Tokens</label>
                                <input type="number" id="max-tokens" name="maxTokens" class="form-input"
                                       min="1000" max="8000">
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="temperature">Temperature</label>
                            <input type="range" id="temperature" name="temperature" class="form-range"
                                   min="0" max="1" step="0.1" value="0.7">
                            <div class="range-value" id="temperature-value">0.7</div>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="claude-context">Context</label>
                            <textarea id="claude-context" name="claudeContext" class="form-textarea"
                                      placeholder="Provide context about your project for Claude..."></textarea>
                        </div>
                    </div>
                </div>

                <!-- BMAD Configuration -->
                <div class="form-section">
                    <h3>BMAD Multi-Agent Development</h3>

                    <div class="form-group">
                        <label class="form-checkbox">
                            <input type="checkbox" id="bmad-enabled" name="bmadEnabled">
                            <span class="checkmark"></span>
                            Enable BMAD Multi-Agent Development
                        </label>
                    </div>

                    <div id="bmad-config" class="bmad-config">
                        <div class="grid grid-2">
                            <div class="form-group">
                                <label class="form-label" for="bmad-workflow">Workflow Type</label>
                                <select id="bmad-workflow" name="bmadWorkflow" class="form-select">
                                    <option value="agile">Agile Development</option>
                                    <option value="waterfall">Waterfall</option>
                                    <option value="startup">Startup MVP</option>
                                    <option value="enterprise">Enterprise</option>
                                    <option value="maintenance">Maintenance</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="form-label" for="bmad-status">BMAD Status</label>
                                <select id="bmad-status" name="bmadStatus" class="form-select">
                                    <option value="stopped">Stopped</option>
                                    <option value="running">Running</option>
                                    <option value="paused">Paused</option>
                                    <option value="completed">Completed</option>
                                </select>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label">Agents</label>
                            <div class="agent-selector" id="agent-selector">
                                <!-- Agents will be loaded dynamically -->
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="current-phase">Current Phase</label>
                            <select id="current-phase" name="currentPhase" class="form-select">
                                <!-- Phases will be loaded based on workflow -->
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary btn-lg" id="save-btn">
                        <i class="ti ti-check"></i>
                        Save Changes
                    </button>
                    <button type="button" class="btn btn-secondary btn-lg" id="reset-btn">
                        <i class="ti ti-refresh"></i>
                        Reset
                    </button>
                    <a href="/projects" class="btn btn-secondary btn-lg">
                        <i class="ti ti-x"></i>
                        Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>

    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: var(--space-lg);
        }

        .loading-state {
            text-align: center;
            padding: var(--space-2xl);
            color: var(--text-secondary);
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid var(--border);
            border-top: 4px solid var(--accent-primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto var(--space-md);
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .form-section {
            margin-bottom: var(--space-2xl);
            padding-bottom: var(--space-xl);
            border-bottom: 1px solid var(--border);
        }

        .form-section:last-child {
            border-bottom: none;
        }

        .form-section h3 {
            margin-bottom: var(--space-lg);
            color: var(--text-primary);
            font-size: var(--font-size-lg);
            font-weight: 600;
        }

        .form-group {
            margin-bottom: var(--space-md);
        }

        .form-label {
            display: block;
            margin-bottom: var(--space-xs);
            color: var(--text-primary);
            font-weight: 500;
        }

        .form-input, .form-textarea, .form-select {
            width: 100%;
            padding: var(--space-sm);
            border: 1px solid var(--border);
            border-radius: var(--radius-md);
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: var(--font-size-base);
            transition: var(--transition);
        }

        .form-input:focus, .form-textarea:focus, .form-select:focus {
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .form-input:read-only {
            background: var(--bg-tertiary);
            color: var(--text-muted);
        }

        .form-textarea {
            min-height: 100px;
            resize: vertical;
        }

        .form-help {
            color: var(--text-muted);
            font-size: var(--font-size-sm);
            margin-top: var(--space-xs);
        }

        .form-range {
            width: 100%;
            padding: 0;
            margin: var(--space-sm) 0;
        }

        .range-value {
            text-align: center;
            color: var(--text-secondary);
            font-size: var(--font-size-sm);
        }

        .input-group {
            display: flex;
            gap: var(--space-sm);
        }

        .input-group .form-input {
            flex: 1;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: var(--space-md);
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: var(--space-md);
            padding: var(--space-md);
            background: var(--bg-tertiary);
            border-radius: var(--radius-md);
            border: 1px solid var(--border);
        }

        .stat-icon {
            width: 40px;
            height: 40px;
            background: var(--gradient-primary);
            border-radius: var(--radius-md);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
            flex-shrink: 0;
        }

        .stat-content {
            flex: 1;
        }

        .stat-label {
            color: var(--text-secondary);
            font-size: var(--font-size-sm);
            font-weight: 500;
        }

        .stat-value {
            color: var(--text-primary);
            font-weight: 600;
            font-size: var(--font-size-md);
        }

        .form-checkbox {
            display: flex;
            align-items: center;
            gap: var(--space-sm);
            cursor: pointer;
            color: var(--text-primary);
        }

        .form-checkbox input[type="checkbox"] {
            width: auto;
            margin: 0;
        }

        .checkmark {
            font-weight: 500;
        }

        .claude-config, .bmad-config {
            margin-top: var(--space-md);
            padding: var(--space-lg);
            background: var(--bg-tertiary);
            border-radius: var(--radius-md);
            transition: var(--transition);
        }

        .agent-selector {
            display: flex;
            flex-wrap: wrap;
            gap: var(--space-sm);
        }

        .agent-option {
            cursor: pointer;
        }

        .agent-badge {
            display: inline-block;
            padding: var(--space-xs) var(--space-sm);
            background: var(--bg-quaternary);
            border: 1px solid var(--border);
            border-radius: var(--radius-full);
            font-size: var(--font-size-sm);
            color: var(--text-secondary);
            transition: var(--transition);
        }

        .agent-option input[type="checkbox"]:checked + .agent-badge {
            background: var(--accent-primary);
            color: white;
            border-color: var(--accent-primary);
        }

        .agent-option input[type="checkbox"] {
            display: none;
        }

        .form-actions {
            display: flex;
            gap: var(--space-md);
            padding-top: var(--space-xl);
            border-top: 1px solid var(--border);
        }

        .btn-lg {
            padding: var(--space-md) var(--space-xl);
            font-size: var(--font-size-md);
        }

        /* Loading state */
        .btn.loading {
            position: relative;
            color: transparent;
        }

        .btn.loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const projectId = '${projectId}';
            const form = document.getElementById('edit-project-form');
            const saveBtn = document.getElementById('save-btn');
            const resetBtn = document.getElementById('reset-btn');
            const deleteBtn = document.getElementById('delete-project');
            const claudeEnabled = document.getElementById('claude-enabled');
            const claudeConfig = document.getElementById('claude-config');
            const bmadEnabled = document.getElementById('bmad-enabled');
            const bmadConfig = document.getElementById('bmad-config');
            const temperatureSlider = document.getElementById('temperature');
            const temperatureValue = document.getElementById('temperature-value');

            let originalData = {};

            // Handle Claude config visibility
            claudeEnabled.addEventListener('change', function() {
                claudeConfig.style.display = this.checked ? 'block' : 'none';
            });

            // Handle BMAD config visibility
            bmadEnabled.addEventListener('change', function() {
                bmadConfig.style.display = this.checked ? 'block' : 'none';
            });

            // Handle temperature slider
            temperatureSlider.addEventListener('input', function() {
                temperatureValue.textContent = this.value;
            });

            // Load project data
            async function loadProject() {
                try {
                    const response = await fetch('/api/projects/' + projectId);
                    const result = await response.json();

                    if (result.success) {
                        originalData = result.data;
                        populateForm(result.data);
                        document.getElementById('loading-state').style.display = 'none';
                        form.style.display = 'block';
                    } else {
                        throw new Error(result.error || 'Failed to load project');
                    }
                } catch (error) {
                    console.error('Error loading project:', error);
                    alert('Failed to load project: ' + error.message);
                    window.location.href = '/projects';
                }
            }

            function populateForm(project) {
                // Basic information
                document.getElementById('project-name').value = project.name || '';
                document.getElementById('project-priority').value = project.priority || 'medium';
                document.getElementById('project-status').value = project.projectStatus || 'active';
                document.getElementById('project-type').value = project.type || 'web';
                document.getElementById('project-description').value = project.description || '';
                document.getElementById('target-folder').value = project.targetFolder || '';

                // GitHub repo if exists
                if (project.githubRepo) {
                    document.getElementById('github-repo-group').style.display = 'block';
                    document.getElementById('github-repo').value = project.githubRepo;
                }

                // Statistics
                document.getElementById('stat-created').textContent =
                    new Date(project.createdAt).toLocaleDateString();
                document.getElementById('stat-modified').textContent =
                    new Date(project.updatedAt).toLocaleDateString();

                if (project.status) {
                    document.getElementById('stat-files').textContent =
                        project.stats?.fileCount || 'Unknown';
                    document.getElementById('stat-size').textContent =
                        formatBytes(project.stats?.size || 0);
                    document.getElementById('stat-git').textContent =
                        project.status.hasGit ? 'Git repository' : 'No Git';
                    document.getElementById('stat-deps').textContent =
                        project.status.hasPackageJson ? 'Has package.json' : 'No dependencies';
                }

                // Claude configuration
                if (project.claudeConfig) {
                    claudeEnabled.checked = project.claudeConfig.enabled || false;
                    document.getElementById('claude-model').value = project.claudeConfig.model || 'claude-3-5-sonnet-20241022';
                    document.getElementById('max-tokens').value = project.claudeConfig.maxTokens || 4000;
                    document.getElementById('temperature').value = project.claudeConfig.temperature || 0.7;
                    document.getElementById('temperature-value').textContent = project.claudeConfig.temperature || 0.7;
                    document.getElementById('claude-context').value = project.claudeConfig.context || '';
                    claudeConfig.style.display = claudeEnabled.checked ? 'block' : 'none';
                }

                // BMAD configuration
                if (project.bmadConfig) {
                    bmadEnabled.checked = project.bmadConfig.enabled || false;
                    document.getElementById('bmad-workflow').value = project.bmadConfig.workflow || 'agile';
                    document.getElementById('bmad-status').value = project.bmadConfig.status || 'stopped';
                    document.getElementById('current-phase').value = project.bmadConfig.currentPhase || '';
                    populateAgents(project.bmadConfig.agents || []);
                    bmadConfig.style.display = bmadEnabled.checked ? 'block' : 'none';
                }
            }

            function populateAgents(selectedAgents) {
                const agentSelector = document.getElementById('agent-selector');
                const commonAgents = ['dev', 'qa', 'pm', 'design', 'devops', 'security', 'support'];

                agentSelector.innerHTML = '';
                commonAgents.forEach(agent => {
                    const label = document.createElement('label');
                    label.className = 'agent-option';

                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.name = 'bmadAgents';
                    checkbox.value = agent;
                    checkbox.checked = selectedAgents.includes(agent);

                    const badge = document.createElement('span');
                    badge.className = 'agent-badge';
                    badge.textContent = agent.charAt(0).toUpperCase() + agent.slice(1);

                    label.appendChild(checkbox);
                    label.appendChild(badge);
                    agentSelector.appendChild(label);
                });
            }

            function formatBytes(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }

            // Handle form submission
            form.addEventListener('submit', async function(e) {
                e.preventDefault();

                saveBtn.disabled = true;
                saveBtn.classList.add('loading');

                try {
                    const formData = new FormData(form);
                    const data = {};

                    // Basic fields
                    data.name = formData.get('name');
                    data.priority = formData.get('priority');
                    data.projectStatus = formData.get('projectStatus');
                    data.type = formData.get('type');
                    data.description = formData.get('description');

                    // Claude configuration
                    data.claudeConfig = {
                        enabled: formData.get('claudeEnabled') === 'on',
                        model: formData.get('claudeModel'),
                        maxTokens: parseInt(formData.get('maxTokens')),
                        temperature: parseFloat(formData.get('temperature')),
                        context: formData.get('claudeContext')
                    };

                    // BMAD configuration
                    const bmadAgents = formData.getAll('bmadAgents');
                    data.bmadConfig = {
                        enabled: formData.get('bmadEnabled') === 'on',
                        workflow: formData.get('bmadWorkflow'),
                        status: formData.get('bmadStatus'),
                        currentPhase: formData.get('currentPhase'),
                        agents: bmadAgents
                    };

                    const response = await fetch('/api/projects/' + projectId, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();

                    if (result.success) {
                        alert('Project updated successfully!');
                        // Update original data
                        originalData = result.data;
                    } else {
                        alert('Failed to update project: ' + result.error);
                    }
                } catch (error) {
                    console.error('Error updating project:', error);
                    alert('Failed to update project: ' + error.message);
                } finally {
                    saveBtn.disabled = false;
                    saveBtn.classList.remove('loading');
                }
            });

            // Reset form
            resetBtn.addEventListener('click', function() {
                if (confirm('Are you sure you want to reset all changes?')) {
                    populateForm(originalData);
                }
            });

            // Delete project
            deleteBtn.addEventListener('click', async function() {
                if (confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
                    try {
                        const response = await fetch('/api/projects/' + projectId, {
                            method: 'DELETE'
                        });

                        const result = await response.json();

                        if (result.success) {
                            alert('Project deleted successfully!');
                            window.location.href = '/projects';
                        } else {
                            alert('Failed to delete project: ' + result.error);
                        }
                    } catch (error) {
                        console.error('Error deleting project:', error);
                        alert('Failed to delete project: ' + error.message);
                    }
                }
            });

            // Open folder/repo buttons
            document.getElementById('open-folder').addEventListener('click', function() {
                const folder = document.getElementById('target-folder').value;
                if (folder) {
                    alert('Opening folder: ' + folder);
                    // In a real app, this would open the file manager
                }
            });

            document.getElementById('open-repo').addEventListener('click', function() {
                const repo = document.getElementById('github-repo').value;
                if (repo) {
                    window.open(repo, '_blank');
                }
            });

            // Load project data on page load
            loadProject();
        });
    </script>
    `
}) %>