<%
// Set layout variables
const pageTitle = 'Import Existing Project';
const pageDescription = 'Import an existing project folder and configure it for Claude Code and BMAD.';
%>

<%- include('partials/layout', {
    title,
    env,
    currentPage: 'projects',
    pageTitle,
    pageDescription,
    body: `
    <!-- Project Import Form -->
    <div class="container">
        <div class="card">
            <div class="card-header">
                <h2 class="card-title">
                    <i class="ti ti-upload"></i>
                    Import Existing Project
                </h2>
                <a href="/projects" class="btn btn-secondary">
                    <i class="ti ti-arrow-left"></i>
                    Back to Projects
                </a>
            </div>

            <form id="import-project-form" class="form">
                <!-- Project Location -->
                <div class="form-section">
                    <h3>Project Location</h3>

                    <div class="form-group">
                        <label class="form-label" for="project-folder">Project Folder *</label>
                        <div class="input-group">
                            <input type="text" id="project-folder" name="projectFolder" class="form-input" required
                                   placeholder="/path/to/existing/project">
                            <button type="button" class="btn btn-secondary" id="browse-folder">
                                <i class="ti ti-folder"></i>
                                Browse
                            </button>
                            <button type="button" class="btn btn-secondary" id="scan-folder">
                                <i class="ti ti-scan"></i>
                                Scan
                            </button>
                        </div>
                        <small class="form-help">Select the root directory of your existing project</small>
                    </div>

                    <!-- Project Info Display -->
                    <div id="project-info" class="project-info" style="display: none;">
                        <h4>Project Information</h4>
                        <div class="info-grid">
                            <div class="info-item">
                                <span class="info-label">Project Type:</span>
                                <span class="info-value" id="detected-type">Unknown</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Git Repository:</span>
                                <span class="info-value" id="git-status">Not detected</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Package Manager:</span>
                                <span class="info-value" id="package-manager">None</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Dependencies:</span>
                                <span class="info-value" id="dependencies-count">0</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Files Count:</span>
                                <span class="info-value" id="files-count">0</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Last Modified:</span>
                                <span class="info-value" id="last-modified">Unknown</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Project Configuration -->
                <div class="form-section">
                    <h3>Project Configuration</h3>

                    <div class="grid grid-2">
                        <div class="form-group">
                            <label class="form-label" for="project-name">Project Name *</label>
                            <input type="text" id="project-name" name="name" class="form-input" required
                                   placeholder="Auto-detected from folder">
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="project-priority">Priority</label>
                            <select id="project-priority" name="priority" class="form-select">
                                <option value="low">Low</option>
                                <option value="medium" selected>Medium</option>
                                <option value="high">High</option>
                                <option value="critical">Critical</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="project-description">Description</label>
                        <textarea id="project-description" name="description" class="form-textarea"
                                  placeholder="Describe your project..."></textarea>
                    </div>
                </div>

                <!-- Import Options -->
                <div class="form-section">
                    <h3>Import Options</h3>

                    <div class="grid grid-2">
                        <label class="form-checkbox">
                            <input type="checkbox" name="preserveGit" checked>
                            <span class="checkmark"></span>
                            Preserve existing Git repository
                        </label>

                        <label class="form-checkbox">
                            <input type="checkbox" name="createBackup">
                            <span class="checkmark"></span>
                            Create backup before import
                        </label>

                        <label class="form-checkbox">
                            <input type="checkbox" name="updateDependencies">
                            <span class="checkmark"></span>
                            Update dependencies to latest versions
                        </label>

                        <label class="form-checkbox">
                            <input type="checkbox" name="addGitignore" checked>
                            <span class="checkmark"></span>
                            Add Claude Code entries to .gitignore
                        </label>
                    </div>
                </div>

                <!-- Claude Configuration -->
                <div class="form-section">
                    <h3>Claude Code Configuration</h3>

                    <div class="form-group">
                        <label class="form-checkbox">
                            <input type="checkbox" id="claude-enabled" name="claudeEnabled" checked>
                            <span class="checkmark"></span>
                            Enable Claude Code Assistant
                        </label>
                    </div>

                    <div id="claude-config" class="claude-config">
                        <div class="grid grid-2">
                            <div class="form-group">
                                <label class="form-label" for="claude-model">Model</label>
                                <select id="claude-model" name="claudeModel" class="form-select">
                                    <option value="claude-3-5-sonnet-20241022" selected>Claude 3.5 Sonnet</option>
                                    <option value="claude-3-opus-20240229">Claude 3 Opus</option>
                                    <option value="claude-3-haiku-20240307">Claude 3 Haiku</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="form-label" for="max-tokens">Max Tokens</label>
                                <input type="number" id="max-tokens" name="maxTokens" class="form-input"
                                       value="4000" min="1000" max="8000">
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="claude-context">Context</label>
                            <textarea id="claude-context" name="claudeContext" class="form-textarea"
                                      placeholder="Provide context about your project for Claude..."></textarea>
                        </div>
                    </div>
                </div>

                <!-- BMAD Configuration -->
                <div class="form-section">
                    <h3>BMAD Multi-Agent Development</h3>

                    <div class="form-group">
                        <label class="form-checkbox">
                            <input type="checkbox" id="bmad-enabled" name="bmadEnabled" checked>
                            <span class="checkmark"></span>
                            Enable BMAD Multi-Agent Development
                        </label>
                    </div>

                    <div id="bmad-config" class="bmad-config">
                        <div class="grid grid-2">
                            <div class="form-group">
                                <label class="form-label" for="bmad-workflow">Workflow Type</label>
                                <select id="bmad-workflow" name="bmadWorkflow" class="form-select">
                                    <option value="maintenance" selected>Maintenance & Updates</option>
                                    <option value="agile">Agile Development</option>
                                    <option value="waterfall">Waterfall</option>
                                    <option value="enterprise">Enterprise</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label class="form-label" for="bmad-agents">Agents</label>
                                <div class="agent-selector">
                                    <label class="agent-option">
                                        <input type="checkbox" name="bmadAgents" value="dev" checked>
                                        <span class="agent-badge">Developer</span>
                                    </label>
                                    <label class="agent-option">
                                        <input type="checkbox" name="bmadAgents" value="qa">
                                        <span class="agent-badge">QA Engineer</span>
                                    </label>
                                    <label class="agent-option">
                                        <input type="checkbox" name="bmadAgents" value="support" checked>
                                        <span class="agent-badge">Support</span>
                                    </label>
                                    <label class="agent-option">
                                        <input type="checkbox" name="bmadAgents" value="devops">
                                        <span class="agent-badge">DevOps</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary btn-lg" id="import-btn">
                        <i class="ti ti-upload"></i>
                        Import Project
                    </button>
                    <a href="/projects" class="btn btn-secondary btn-lg">
                        <i class="ti ti-x"></i>
                        Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>

    <style>
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: var(--space-lg);
        }

        .form-section {
            margin-bottom: var(--space-2xl);
            padding-bottom: var(--space-xl);
            border-bottom: 1px solid var(--border);
        }

        .form-section:last-child {
            border-bottom: none;
        }

        .form-section h3 {
            margin-bottom: var(--space-lg);
            color: var(--text-primary);
            font-size: var(--font-size-lg);
            font-weight: 600;
        }

        .form-group {
            margin-bottom: var(--space-md);
        }

        .form-label {
            display: block;
            margin-bottom: var(--space-xs);
            color: var(--text-primary);
            font-weight: 500;
        }

        .form-input, .form-textarea, .form-select {
            width: 100%;
            padding: var(--space-sm);
            border: 1px solid var(--border);
            border-radius: var(--radius-md);
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: var(--font-size-base);
            transition: var(--transition);
        }

        .form-input:focus, .form-textarea:focus, .form-select:focus {
            outline: none;
            border-color: var(--accent-primary);
            box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
        }

        .form-textarea {
            min-height: 100px;
            resize: vertical;
        }

        .form-help {
            color: var(--text-muted);
            font-size: var(--font-size-sm);
            margin-top: var(--space-xs);
        }

        .input-group {
            display: flex;
            gap: var(--space-sm);
        }

        .input-group .form-input {
            flex: 1;
        }

        .project-info {
            margin-top: var(--space-lg);
            padding: var(--space-lg);
            background: var(--bg-tertiary);
            border-radius: var(--radius-md);
            border: 1px solid var(--border);
        }

        .project-info h4 {
            margin-bottom: var(--space-md);
            color: var(--text-primary);
            font-weight: 600;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: var(--space-md);
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: var(--space-sm);
            background: var(--bg-quaternary);
            border-radius: var(--radius-sm);
        }

        .info-label {
            color: var(--text-secondary);
            font-weight: 500;
            font-size: var(--font-size-sm);
        }

        .info-value {
            color: var(--text-primary);
            font-weight: 600;
            font-size: var(--font-size-sm);
        }

        .form-checkbox {
            display: flex;
            align-items: center;
            gap: var(--space-sm);
            cursor: pointer;
            color: var(--text-primary);
        }

        .form-checkbox input[type="checkbox"] {
            width: auto;
            margin: 0;
        }

        .checkmark {
            font-weight: 500;
        }

        .claude-config, .bmad-config {
            margin-top: var(--space-md);
            padding: var(--space-lg);
            background: var(--bg-tertiary);
            border-radius: var(--radius-md);
            transition: var(--transition);
        }

        .agent-selector {
            display: flex;
            flex-wrap: wrap;
            gap: var(--space-sm);
        }

        .agent-option {
            cursor: pointer;
        }

        .agent-badge {
            display: inline-block;
            padding: var(--space-xs) var(--space-sm);
            background: var(--bg-quaternary);
            border: 1px solid var(--border);
            border-radius: var(--radius-full);
            font-size: var(--font-size-sm);
            color: var(--text-secondary);
            transition: var(--transition);
        }

        .agent-option input[type="checkbox"]:checked + .agent-badge {
            background: var(--accent-primary);
            color: white;
            border-color: var(--accent-primary);
        }

        .agent-option input[type="checkbox"] {
            display: none;
        }

        .form-actions {
            display: flex;
            gap: var(--space-md);
            padding-top: var(--space-xl);
            border-top: 1px solid var(--border);
        }

        .btn-lg {
            padding: var(--space-md) var(--space-xl);
            font-size: var(--font-size-md);
        }

        /* Loading state */
        .btn.loading {
            position: relative;
            color: transparent;
        }

        .btn.loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: translate(-50%, -50%) rotate(360deg); }
        }

        .scanning {
            opacity: 0.7;
            pointer-events: none;
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('import-project-form');
            const importBtn = document.getElementById('import-btn');
            const claudeEnabled = document.getElementById('claude-enabled');
            const claudeConfig = document.getElementById('claude-config');
            const bmadEnabled = document.getElementById('bmad-enabled');
            const bmadConfig = document.getElementById('bmad-config');
            const projectFolder = document.getElementById('project-folder');
            const projectInfo = document.getElementById('project-info');

            // Handle Claude config visibility
            claudeEnabled.addEventListener('change', function() {
                claudeConfig.style.display = this.checked ? 'block' : 'none';
            });

            // Handle BMAD config visibility
            bmadEnabled.addEventListener('change', function() {
                bmadConfig.style.display = this.checked ? 'block' : 'none';
            });

            // Handle folder scanning
            document.getElementById('scan-folder').addEventListener('click', async function() {
                const folderPath = projectFolder.value.trim();
                if (!folderPath) {
                    alert('Please enter a project folder path first');
                    return;
                }

                this.classList.add('loading');
                this.disabled = true;

                try {
                    // Create a mock project to scan the folder
                    const response = await fetch('/api/projects', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            name: 'temp-scan',
                            targetFolder: folderPath
                        })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            await displayProjectInfo(folderPath);
                            // Delete the temporary project
                            await fetch('/api/projects/' + result.data.id, { method: 'DELETE' });
                        }
                    }
                } catch (error) {
                    console.error('Error scanning folder:', error);
                    alert('Failed to scan folder: ' + error.message);
                } finally {
                    this.classList.remove('loading');
                    this.disabled = false;
                }
            });

            async function displayProjectInfo(folderPath) {
                try {
                    // Simulate scanning results - in a real app this would call an API
                    const folderName = folderPath.split('/').pop() || 'Unknown';
                    const projectName = document.getElementById('project-name');

                    if (!projectName.value) {
                        projectName.value = folderName.replace(/[-_]/g, ' ');
                    }

                    // Show project info
                    projectInfo.style.display = 'block';

                    // Update detected info (these would come from actual scanning)
                    document.getElementById('detected-type').textContent = detectProjectType(folderPath);
                    document.getElementById('git-status').textContent = 'Git repository detected';
                    document.getElementById('package-manager').textContent = 'npm';
                    document.getElementById('dependencies-count').textContent = '25';
                    document.getElementById('files-count').textContent = '156';
                    document.getElementById('last-modified').textContent = new Date().toLocaleDateString();

                } catch (error) {
                    console.error('Error displaying project info:', error);
                }
            }

            function detectProjectType(folderPath) {
                const path = folderPath.toLowerCase();
                if (path.includes('react') || path.includes('nextjs')) return 'React Application';
                if (path.includes('vue')) return 'Vue.js Application';
                if (path.includes('angular')) return 'Angular Application';
                if (path.includes('express') || path.includes('node')) return 'Node.js Application';
                if (path.includes('python') || path.includes('flask') || path.includes('django')) return 'Python Application';
                return 'Web Application';
            }

            // Handle form submission
            form.addEventListener('submit', async function(e) {
                e.preventDefault();

                const folderPath = projectFolder.value.trim();
                if (!folderPath) {
                    alert('Please select a project folder');
                    return;
                }

                // Disable submit button and show loading
                importBtn.disabled = true;
                importBtn.classList.add('loading');

                try {
                    const formData = new FormData(form);
                    const data = {};

                    // Basic fields
                    data.name = formData.get('name');
                    data.description = formData.get('description');
                    data.targetFolder = folderPath;
                    data.priority = formData.get('priority');
                    data.importOptions = {
                        preserveGit: formData.get('preserveGit') === 'on',
                        createBackup: formData.get('createBackup') === 'on',
                        updateDependencies: formData.get('updateDependencies') === 'on',
                        addGitignore: formData.get('addGitignore') === 'on'
                    };

                    // Claude configuration
                    data.claudeConfig = {
                        enabled: formData.get('claudeEnabled') === 'on',
                        model: formData.get('claudeModel'),
                        maxTokens: parseInt(formData.get('maxTokens')),
                        temperature: 0.7,
                        context: formData.get('claudeContext')
                    };

                    // BMAD configuration
                    const bmadAgents = formData.getAll('bmadAgents');
                    data.bmadConfig = {
                        enabled: formData.get('bmadEnabled') === 'on',
                        workflow: formData.get('bmadWorkflow'),
                        agents: bmadAgents
                    };

                    const response = await fetch('/api/projects', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Show success message
                        alert('Project imported successfully!');
                        // Redirect to project details or projects list
                        window.location.href = '/projects';
                    } else {
                        alert('Failed to import project: ' + result.error);
                    }
                } catch (error) {
                    console.error('Error importing project:', error);
                    alert('Failed to import project: ' + error.message);
                } finally {
                    // Re-enable submit button
                    importBtn.disabled = false;
                    importBtn.classList.remove('loading');
                }
            });

            // Browse folder button (simplified)
            document.getElementById('browse-folder').addEventListener('click', function() {
                const suggested = prompt('Enter the path to your existing project:');
                if (suggested) {
                    projectFolder.value = suggested;
                }
            });
        });
    </script>
    `
}) %>