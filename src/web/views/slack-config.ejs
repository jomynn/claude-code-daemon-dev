<%
// Set layout variables
const pageTitle = 'Slack Configuration';
const pageDescription = 'Configure Slack integration for notifications, alerts, and real-time updates.';
%>

<%- include('partials/layout', {
    title,
    env,
    currentPage,
    pageTitle,
    pageDescription,
    body: `
    <!-- Connection Status -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="ti ti-brand-slack"></i>
                Connection Status
            </h2>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--space-lg);">
            <div style="display: flex; align-items: center; gap: var(--space-md);">
                <span class="badge badge-error" id="slack-status">Disconnected</span>
                <span style="color: var(--text-secondary);">No workspace connected</span>
            </div>
            <button class="btn btn-primary" id="test-connection">
                <i class="ti ti-wifi"></i>
                Test Connection
            </button>
        </div>
    </div>

    <!-- Configuration Form -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="ti ti-settings"></i>
                Slack App Configuration
            </h2>
        </div>
        <form id="slack-config-form">
            <div class="grid grid-2">
                <div class="form-group">
                    <label class="form-label">Bot Token *</label>
                    <input type="password" class="form-input" id="bot-token"
                           placeholder="xoxb-your-bot-token" required>
                    <p style="color: var(--text-secondary); font-size: var(--font-size-sm); margin-top: var(--space-xs);">
                        OAuth token for your Slack bot (starts with xoxb-)
                    </p>
                </div>
                <div class="form-group">
                    <label class="form-label">App Token *</label>
                    <input type="password" class="form-input" id="app-token"
                           placeholder="xapp-your-app-token" required>
                    <p style="color: var(--text-secondary); font-size: var(--font-size-sm); margin-top: var(--space-xs);">
                        App-level token for Socket Mode (starts with xapp-)
                    </p>
                </div>
            </div>

            <div class="form-group">
                <label class="form-label">Signing Secret</label>
                <input type="password" class="form-input" id="signing-secret"
                       placeholder="Your app's signing secret">
                <p style="color: var(--text-secondary); font-size: var(--font-size-sm); margin-top: var(--space-xs);">
                    Used to verify requests from Slack (optional for Socket Mode)
                </p>
            </div>

            <div class="grid grid-2">
                <div class="form-group">
                    <label class="form-label">Default Channel</label>
                    <input type="text" class="form-input" id="default-channel"
                           placeholder="#general" value="#general">
                </div>
                <div class="form-group">
                    <label class="form-label">Alert Channel</label>
                    <input type="text" class="form-input" id="alert-channel"
                           placeholder="#alerts" value="#alerts">
                </div>
            </div>

            <div style="margin-top: var(--space-lg);">
                <button type="submit" class="btn btn-primary">
                    <i class="ti ti-check"></i>
                    Save Configuration
                </button>
                <button type="button" class="btn btn-secondary" id="clear-config">
                    <i class="ti ti-trash"></i>
                    Clear
                </button>
            </div>
        </form>
    </div>

    <!-- Notification Settings -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="ti ti-bell"></i>
                Notification Settings
            </h2>
        </div>
        <div class="grid grid-2">
            <div class="form-group">
                <label class="form-label">
                    <input type="checkbox" checked> System Alerts
                </label>
                <p style="color: var(--text-secondary); font-size: var(--font-size-sm);">
                    Send critical system alerts to Slack
                </p>
            </div>
            <div class="form-group">
                <label class="form-label">
                    <input type="checkbox" checked> Usage Notifications
                </label>
                <p style="color: var(--text-secondary); font-size: var(--font-size-sm);">
                    Notify when approaching usage limits
                </p>
            </div>
            <div class="form-group">
                <label class="form-label">
                    <input type="checkbox"> Project Updates
                </label>
                <p style="color: var(--text-secondary); font-size: var(--font-size-sm);">
                    Send project status updates
                </p>
            </div>
            <div class="form-group">
                <label class="form-label">
                    <input type="checkbox"> BMAD Workflow Status
                </label>
                <p style="color: var(--text-secondary); font-size: var(--font-size-sm);">
                    Notify about workflow progress
                </p>
            </div>
        </div>
    </div>

    <!-- Setup Instructions -->
    <div class="card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="ti ti-help"></i>
                Setup Instructions
            </h2>
        </div>
        <div class="setup-steps">
            <div class="step">
                <div class="step-number">1</div>
                <div class="step-content">
                    <h4>Create a Slack App</h4>
                    <p>Go to <a href="https://api.slack.com/apps" target="_blank">api.slack.com/apps</a> and create a new app for your workspace.</p>
                </div>
            </div>
            <div class="step">
                <div class="step-number">2</div>
                <div class="step-content">
                    <h4>Configure Permissions</h4>
                    <p>Add the following OAuth scopes: <code>chat:write</code>, <code>channels:read</code>, <code>groups:read</code>, <code>im:read</code>, <code>mpim:read</code></p>
                </div>
            </div>
            <div class="step">
                <div class="step-number">3</div>
                <div class="step-content">
                    <h4>Enable Socket Mode</h4>
                    <p>Go to Socket Mode settings and enable it. Generate an app-level token with the <code>connections:write</code> scope.</p>
                </div>
            </div>
            <div class="step">
                <div class="step-number">4</div>
                <div class="step-content">
                    <h4>Install to Workspace</h4>
                    <p>Install the app to your workspace and copy the Bot User OAuth Token.</p>
                </div>
            </div>
            <div class="step">
                <div class="step-number">5</div>
                <div class="step-content">
                    <h4>Configure Channels</h4>
                    <p>Invite the bot to the channels where you want to receive notifications.</p>
                </div>
            </div>
        </div>
    </div>

    <style>
        .setup-steps {
            display: flex;
            flex-direction: column;
            gap: var(--space-lg);
        }

        .step {
            display: flex;
            gap: var(--space-md);
            align-items: flex-start;
        }

        .step-number {
            width: 32px;
            height: 32px;
            background: var(--gradient-primary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            flex-shrink: 0;
        }

        .step-content h4 {
            margin-bottom: var(--space-sm);
            color: var(--text-primary);
        }

        .step-content p {
            color: var(--text-secondary);
            margin: 0;
            line-height: 1.5;
        }

        .step-content code {
            background: var(--bg-tertiary);
            padding: 2px 6px;
            border-radius: var(--radius-sm);
            font-family: var(--font-mono);
            font-size: var(--font-size-xs);
            color: var(--accent-primary);
        }

        .step-content a {
            color: var(--accent-primary);
            text-decoration: none;
        }

        .step-content a:hover {
            text-decoration: underline;
        }

        .badge {
            padding: var(--space-xs) var(--space-sm);
            border-radius: var(--radius-full);
            font-size: var(--font-size-xs);
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .badge-success {
            background: var(--success);
            color: white;
        }

        .badge-error {
            background: var(--error);
            color: white;
        }
    </style>

    <script>
        document.getElementById('slack-config-form').addEventListener('submit', function(e) {
            e.preventDefault();

            const formData = {
                botToken: document.getElementById('bot-token').value,
                appToken: document.getElementById('app-token').value,
                signingSecret: document.getElementById('signing-secret').value,
                defaultChannel: document.getElementById('default-channel').value,
                alertChannel: document.getElementById('alert-channel').value
            };

            fetch('/api/slack/config', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Configuration saved successfully!');
                    updateConnectionStatus();
                } else {
                    alert('Failed to save configuration: ' + data.error);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to save configuration');
            });
        });

        document.getElementById('test-connection').addEventListener('click', function() {
            fetch('/api/slack/test')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Connection test successful!');
                        updateConnectionStatus();
                    } else {
                        alert('Connection test failed: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Connection test failed');
                });
        });

        function updateConnectionStatus() {
            fetch('/api/slack/status')
                .then(response => response.json())
                .then(data => {
                    const badge = document.getElementById('slack-status');
                    const statusText = badge.nextElementSibling;

                    if (data.success && data.connected) {
                        badge.className = 'badge badge-success';
                        badge.textContent = 'Connected';

                        let statusMessage = 'Connected to Slack workspace';
                        if (data.workspace) {
                            statusMessage += ': ' + data.workspace;
                        }
                        if (data.botUser) {
                            statusMessage += ' as @' + data.botUser;
                        }
                        statusText.textContent = statusMessage;
                    } else {
                        badge.className = 'badge badge-error';
                        badge.textContent = 'Disconnected';

                        let errorMessage = 'No workspace connected';
                        if (data.error) {
                            errorMessage = data.error;
                        } else if (!data.configured) {
                            errorMessage = 'Configuration incomplete';
                        }
                        statusText.textContent = errorMessage;
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    const badge = document.getElementById('slack-status');
                    const statusText = badge.nextElementSibling;
                    badge.className = 'badge badge-error';
                    badge.textContent = 'Error';
                    statusText.textContent = 'Failed to check connection status';
                });
        }

        function loadCurrentConfiguration() {
            fetch('/api/slack/config')
                .then(response => response.json())
                .then(result => {
                    if (result.success && result.data) {
                        const config = result.data;
                        // Populate form fields with current configuration
                        if (config.defaultChannel) {
                            document.getElementById('default-channel').value = config.defaultChannel;
                        }
                        if (config.alertChannel) {
                            document.getElementById('alert-channel').value = config.alertChannel;
                        }
                        // Note: Don't populate sensitive fields like tokens for security
                    }
                })
                .catch(error => {
                    console.error('Error loading configuration:', error);
                });
        }

        function setupAutoRefresh() {
            // Update connection status every 30 seconds
            setInterval(updateConnectionStatus, 30000);
        }

        // Load current configuration and status
        document.addEventListener('DOMContentLoaded', function() {
            updateConnectionStatus();
            loadCurrentConfiguration();
            setupAutoRefresh();
        });
    </script>
    `
}) %>