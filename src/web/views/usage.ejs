<%
// Set layout variables
const pageTitle = 'Usage Analytics';
const pageDescription = 'Monitor your API usage, token consumption, and performance metrics over time.';
const includeCharts = true;
%>

<%- include('partials/layout', {
    title,
    env,
    currentPage,
    pageTitle,
    pageDescription,
    includeCharts,
    body: `
            <div class="usage-controls">
                <div class="control-group">
                    <label for="time-range">Time Range:</label>
                    <select id="time-range">
                        <option value="hour">Last Hour</option>
                        <option value="day" selected>Last 24 Hours</option>
                        <option value="week">Last Week</option>
                        <option value="month">Last Month</option>
                    </select>
                </div>

                <div class="control-group">
                    <button id="export-btn" class="btn">Export Data</button>
                    <button id="refresh-btn" class="btn">Refresh</button>
                </div>
            </div>

            <div class="usage-stats">
                <div class="stat-card">
                    <h3>Total Tokens</h3>
                    <div class="stat-value" id="total-tokens">0</div>
                    <div class="stat-label">Current Period</div>
                </div>

                <div class="stat-card">
                    <h3>Average Rate</h3>
                    <div class="stat-value" id="avg-rate">0</div>
                    <div class="stat-label">Tokens/Hour</div>
                </div>

                <div class="stat-card">
                    <h3>Peak Usage</h3>
                    <div class="stat-value" id="peak-usage">0</div>
                    <div class="stat-label">Highest Hour</div>
                </div>

                <div class="stat-card">
                    <h3>Predictions</h3>
                    <div class="stat-value" id="prediction-accuracy">0%</div>
                    <div class="stat-label">Model Accuracy</div>
                </div>
            </div>

            <div class="charts-section">
                <div class="chart-container large">
                    <h3>Token Usage Over Time</h3>
                    <canvas id="tokens-chart"></canvas>
                </div>

                <div class="chart-container">
                    <h3>Usage Distribution</h3>
                    <canvas id="distribution-chart"></canvas>
                </div>

                <div class="chart-container">
                    <h3>Request Pattern</h3>
                    <canvas id="pattern-chart"></canvas>
                </div>
            </div>

            <div class="predictions-section">
                <h3>Usage Predictions</h3>
                <div class="prediction-container">
                    <div class="prediction-chart">
                        <canvas id="prediction-chart"></canvas>
                    </div>
                    <div class="prediction-details">
                        <div class="prediction-item">
                            <span class="label">Predicted Limit Hit:</span>
                            <span class="value" id="predicted-time">--</span>
                        </div>
                        <div class="prediction-item">
                            <span class="label">Confidence Level:</span>
                            <span class="value" id="confidence-level">--</span>
                        </div>
                        <div class="prediction-item">
                            <span class="label">Trend:</span>
                            <span class="value" id="usage-trend">--</span>
                        </div>
                        <div class="prediction-item">
                            <span class="label">Recommendation:</span>
                            <span class="value" id="recommendation">--</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="usage-table">
                <h3>Recent Usage Data</h3>
                <div class="table-controls">
                    <input type="text" id="search-input" placeholder="Search...">
                </div>
                <table id="usage-data-table">
                    <thead>
                        <tr>
                            <th>Timestamp</th>
                            <th>Tokens</th>
                            <th>Requests</th>
                            <th>Rate (Tokens/Hour)</th>
                            <th>Request Rate</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Data will be populated here -->
                    </tbody>
                </table>
            </div>
    `
}) %>

<style>
.usage-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding: 20px;
    background: var(--card-bg);
    border-radius: 8px;
    border: 1px solid var(--border-color);
}

.control-group {
    display: flex;
    align-items: center;
    gap: 10px;
}

.control-group label {
    color: var(--text-secondary);
    font-size: 14px;
}

.control-group select {
    background: var(--dark-bg);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    padding: 8px 12px;
    border-radius: 4px;
}

.btn {
    background: var(--primary-color);
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.3s;
}

.btn:hover {
    background: #1976D2;
}

.usage-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.charts-section {
    display: grid;
    grid-template-columns: 2fr 1fr 1fr;
    gap: 20px;
    margin-bottom: 30px;
}

.chart-container.large {
    grid-column: span 3;
}

.predictions-section {
    background: var(--card-bg);
    padding: 20px;
    border-radius: 8px;
    border: 1px solid var(--border-color);
    margin-bottom: 30px;
}

.prediction-container {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 20px;
    margin-top: 20px;
}

.prediction-details {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.prediction-item {
    display: flex;
    justify-content: space-between;
    padding: 10px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 4px;
}

.prediction-item .label {
    color: var(--text-secondary);
    font-size: 14px;
}

.prediction-item .value {
    color: var(--text-primary);
    font-weight: 500;
}

.usage-table {
    background: var(--card-bg);
    padding: 20px;
    border-radius: 8px;
    border: 1px solid var(--border-color);
}

.table-controls {
    margin-bottom: 15px;
}

.table-controls input {
    background: var(--dark-bg);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    padding: 8px 12px;
    border-radius: 4px;
    width: 200px;
}

table {
    width: 100%;
    border-collapse: collapse;
}

table th,
table td {
    padding: 12px;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

table th {
    background: rgba(255, 255, 255, 0.05);
    color: var(--text-secondary);
    font-weight: 500;
}

table td {
    color: var(--text-primary);
}

@media (max-width: 768px) {
    .charts-section {
        grid-template-columns: 1fr;
    }

    .chart-container.large {
        grid-column: span 1;
    }

    .prediction-container {
        grid-template-columns: 1fr;
    }

    .usage-controls {
        flex-direction: column;
        gap: 15px;
    }
}
</style>

<script>
    let tokensChart, distributionChart, patternChart, predictionChart;
    let currentTimeRange = 'day';

    document.addEventListener('DOMContentLoaded', function() {
        initializeCharts();
        loadUsageData();
        setupControls();
        setupAutoRefresh();
    });

    function setupControls() {
        // Time range selector
        document.getElementById('time-range').addEventListener('change', function(e) {
            currentTimeRange = e.target.value;
            loadUsageData();
        });

        // Refresh button
        document.getElementById('refresh-btn').addEventListener('click', function() {
            loadUsageData();
        });

        // Export button
        document.getElementById('export-btn').addEventListener('click', function() {
            exportUsageData();
        });

        // Search functionality
        document.getElementById('search-input').addEventListener('input', function(e) {
            filterUsageTable(e.target.value);
        });
    }

    function loadUsageData() {
        // Show loading state
        updateStatsCards({ total: 'Loading...', rate: 'Loading...', peak: 'Loading...', accuracy: 'Loading...' });

        // Load usage statistics
        fetch('/api/usage/stats?timeRange=' + currentTimeRange)
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    updateStatsCards(result.data);
                    updateCharts(result.data);
                    updatePredictions(result.data.predictions);
                } else {
                    console.error('Failed to load usage stats:', result.error);
                    showFallbackData();
                }
            })
            .catch(error => {
                console.error('Error loading usage data:', error);
                showFallbackData();
            });

        // Load detailed usage data for table
        fetch('/api/usage/detailed?timeRange=' + currentTimeRange)
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    updateUsageTable(result.data);
                }
            })
            .catch(error => {
                console.error('Error loading detailed usage data:', error);
            });
    }

    function updateStatsCards(data) {
        document.getElementById('total-tokens').textContent = formatNumber(data.total || 0);
        document.getElementById('avg-rate').textContent = formatNumber(data.rate || 0);
        document.getElementById('peak-usage').textContent = formatNumber(data.peak || 0);
        document.getElementById('prediction-accuracy').textContent = (data.accuracy || 0) + '%';
    }

    function formatNumber(num) {
        if (typeof num === 'string') return num;
        if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
        if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
        return num.toLocaleString();
    }

    function initializeCharts() {
        // Initialize tokens usage chart
        const tokensCtx = document.getElementById('tokens-chart').getContext('2d');
        tokensChart = new Chart(tokensCtx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Tokens Used',
                    data: [],
                    borderColor: '#2196F3',
                    backgroundColor: 'rgba(33, 150, 243, 0.1)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: { color: '#E0E0E0' }
                    }
                },
                scales: {
                    x: {
                        ticks: { color: '#E0E0E0' },
                        grid: { color: 'rgba(255,255,255,0.1)' }
                    },
                    y: {
                        ticks: { color: '#E0E0E0' },
                        grid: { color: 'rgba(255,255,255,0.1)' }
                    }
                }
            }
        });

        // Initialize distribution chart
        const distributionCtx = document.getElementById('distribution-chart').getContext('2d');
        distributionChart = new Chart(distributionCtx, {
            type: 'doughnut',
            data: {
                labels: ['API Calls', 'Completions', 'Embeddings', 'Fine-tuning'],
                datasets: [{
                    data: [0, 0, 0, 0],
                    backgroundColor: ['#2196F3', '#4CAF50', '#FF9800', '#9C27B0']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: { color: '#E0E0E0' }
                    }
                }
            }
        });

        // Initialize pattern chart
        const patternCtx = document.getElementById('pattern-chart').getContext('2d');
        patternChart = new Chart(patternCtx, {
            type: 'bar',
            data: {
                labels: [],
                datasets: [{
                    label: 'Requests',
                    data: [],
                    backgroundColor: '#4CAF50'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: { color: '#E0E0E0' }
                    }
                },
                scales: {
                    x: {
                        ticks: { color: '#E0E0E0' },
                        grid: { color: 'rgba(255,255,255,0.1)' }
                    },
                    y: {
                        ticks: { color: '#E0E0E0' },
                        grid: { color: 'rgba(255,255,255,0.1)' }
                    }
                }
            }
        });

        // Initialize prediction chart
        const predictionCtx = document.getElementById('prediction-chart').getContext('2d');
        predictionChart = new Chart(predictionCtx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'Historical',
                    data: [],
                    borderColor: '#2196F3',
                    backgroundColor: 'rgba(33, 150, 243, 0.1)'
                }, {
                    label: 'Predicted',
                    data: [],
                    borderColor: '#FF9800',
                    backgroundColor: 'rgba(255, 152, 0, 0.1)',
                    borderDash: [5, 5]
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: { color: '#E0E0E0' }
                    }
                },
                scales: {
                    x: {
                        ticks: { color: '#E0E0E0' },
                        grid: { color: 'rgba(255,255,255,0.1)' }
                    },
                    y: {
                        ticks: { color: '#E0E0E0' },
                        grid: { color: 'rgba(255,255,255,0.1)' }
                    }
                }
            }
        });
    }

    function updateCharts(data) {
        // Update tokens chart
        if (data.timeline) {
            tokensChart.data.labels = data.timeline.labels || [];
            tokensChart.data.datasets[0].data = data.timeline.tokens || [];
            tokensChart.update();
        }

        // Update distribution chart
        if (data.distribution) {
            distributionChart.data.datasets[0].data = [
                data.distribution.api || 0,
                data.distribution.completions || 0,
                data.distribution.embeddings || 0,
                data.distribution.finetuning || 0
            ];
            distributionChart.update();
        }

        // Update pattern chart
        if (data.pattern) {
            patternChart.data.labels = data.pattern.labels || [];
            patternChart.data.datasets[0].data = data.pattern.requests || [];
            patternChart.update();
        }
    }

    function updatePredictions(predictions) {
        if (!predictions) return;

        document.getElementById('predicted-time').textContent = predictions.timeToLimit || '--';
        document.getElementById('confidence-level').textContent = predictions.confidence || '--';
        document.getElementById('usage-trend').textContent = predictions.trend || '--';
        document.getElementById('recommendation').textContent = predictions.recommendation || '--';

        // Update prediction chart
        if (predictions.chart) {
            predictionChart.data.labels = predictions.chart.labels || [];
            predictionChart.data.datasets[0].data = predictions.chart.historical || [];
            predictionChart.data.datasets[1].data = predictions.chart.predicted || [];
            predictionChart.update();
        }
    }

    function updateUsageTable(data) {
        const tbody = document.querySelector('#usage-data-table tbody');
        tbody.innerHTML = '';

        if (!data || !data.length) {
            tbody.innerHTML = '<tr><td colspan="5" style="text-align: center; color: var(--text-secondary);">No usage data available</td></tr>';
            return;
        }

        data.forEach(row => {
            const tr = document.createElement('tr');
            tr.innerHTML = \`
                <td>\${new Date(row.timestamp).toLocaleString()}</td>
                <td>\${formatNumber(row.tokens || 0)}</td>
                <td>\${formatNumber(row.requests || 0)}</td>
                <td>\${formatNumber(row.tokenRate || 0)}</td>
                <td>\${formatNumber(row.requestRate || 0)}</td>
            \`;
            tbody.appendChild(tr);
        });
    }

    function filterUsageTable(searchTerm) {
        const rows = document.querySelectorAll('#usage-data-table tbody tr');
        const term = searchTerm.toLowerCase();

        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(term) ? '' : 'none';
        });
    }

    function exportUsageData() {
        fetch('/api/usage/export?timeRange=' + currentTimeRange)
            .then(response => response.blob())
            .then(blob => {
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = \`usage-data-\${currentTimeRange}-\${new Date().toISOString().split('T')[0]}.csv\`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
            })
            .catch(error => {
                console.error('Error exporting data:', error);
                alert('Failed to export data');
            });
    }

    function showFallbackData() {
        // Show sample data when API is not available
        const fallbackData = {
            total: 125000,
            rate: 2500,
            peak: 8500,
            accuracy: 85,
            timeline: {
                labels: ['6h ago', '5h ago', '4h ago', '3h ago', '2h ago', '1h ago', 'Now'],
                tokens: [1200, 1800, 2200, 1900, 2800, 3200, 2500]
            },
            distribution: {
                api: 60,
                completions: 25,
                embeddings: 10,
                finetuning: 5
            },
            pattern: {
                labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                requests: [120, 190, 160, 200, 180, 90, 85]
            }
        };

        updateStatsCards(fallbackData);
        updateCharts(fallbackData);

        // Show a note about fallback data
        console.log('Using fallback data - API not available');
    }

    function setupAutoRefresh() {
        // Refresh data every 2 minutes
        setInterval(loadUsageData, 120000);
    }
</script>